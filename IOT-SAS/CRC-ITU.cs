using System;
namespace IOTSAS
{
    public static class CRC_ITU
    {
        
       static readonly byte[] Crc8ItuTable = new byte[] { 0x00, 0xE0, 0x70, 0x90, 0x38, 0xD8, 0x48, 0xA8, 0x1C, 0xFC, 0x6C, 0x8C, 0x24, 0xC4, 0x54, 0xB4,
                                           0x0E, 0xEE, 0x7E, 0x9E, 0x36, 0xD6, 0x46, 0xA6, 0x12, 0xF2, 0x62, 0x82, 0x2A, 0xCA, 0x5A, 0xBA,
                                           0x07, 0xE7, 0x77, 0x97, 0x3F, 0xDF, 0x4F, 0xAF, 0x1B, 0xFB, 0x6B, 0x8B, 0x23, 0xC3, 0x53, 0xB3,
                                           0x09, 0xE9, 0x79, 0x99, 0x31, 0xD1, 0x41, 0xA1, 0x15, 0xF5, 0x65, 0x85, 0x2D, 0xCD, 0x5D, 0xBD,
                                           0xE3, 0x03, 0x93, 0x73, 0xDB, 0x3B, 0xAB, 0x4B, 0xFF, 0x1F, 0x8F, 0x6F, 0xC7, 0x27, 0xB7, 0x57,
                                           0xED, 0x0D, 0x9D, 0x7D, 0xD5, 0x35, 0xA5, 0x45, 0xF1, 0x11, 0x81, 0x61, 0xC9, 0x29, 0xB9, 0x59,
                                           0xE4, 0x04, 0x94, 0x74, 0xDC, 0x3C, 0xAC, 0x4C, 0xF8, 0x18, 0x88, 0x68, 0xC0, 0x20, 0xB0, 0x50,
                                           0xEA, 0x0A, 0x9A, 0x7A, 0xD2, 0x32, 0xA2, 0x42, 0xF6, 0x16, 0x86, 0x66, 0xCE, 0x2E, 0xBE, 0x5E,
                                           0x91, 0x71, 0xE1, 0x01, 0xA9, 0x49, 0xD9, 0x39, 0x8D, 0x6D, 0xFD, 0x1D, 0xB5, 0x55, 0xC5, 0x25,
                                           0x9F, 0x7F, 0xEF, 0x0F, 0xA7, 0x47, 0xD7, 0x37, 0x83, 0x63, 0xF3, 0x13, 0xBB, 0x5B, 0xCB, 0x2B,
                                           0x96, 0x76, 0xE6, 0x06, 0xAE, 0x4E, 0xDE, 0x3E, 0x8A, 0x6A, 0xFA, 0x1A, 0xB2, 0x52, 0xC2, 0x22,
                                           0x98, 0x78, 0xE8, 0x08, 0xA0, 0x40, 0xD0, 0x30, 0x84, 0x64, 0xF4, 0x14, 0xBC, 0x5C, 0xCC, 0x2C,
                                           0x72, 0x92, 0x02, 0xE2, 0x4A, 0xAA, 0x3A, 0xDA, 0x6E, 0x8E, 0x1E, 0xFE, 0x56, 0xB6, 0x26, 0xC6,
                                           0x7C, 0x9C, 0x0C, 0xEC, 0x44, 0xA4, 0x34, 0xD4, 0x60, 0x80, 0x10, 0xF0, 0x58, 0xB8, 0x28, 0xC8,
                                           0x75, 0x95, 0x05, 0xE5, 0x4D, 0xAD, 0x3D, 0xDD, 0x69, 0x89, 0x19, 0xF9, 0x51, 0xB1, 0x21, 0xC1,
                                           0x7B, 0x9B, 0x0B, 0xEB, 0x43, 0xA3, 0x33, 0xD3, 0x67, 0x87, 0x17, 0xF7, 0x5F, 0xBF, 0x2F, 0xCF};


    //public static UInt16 ReadBigEndianUInt16(this byte[] data, int offset)
    //{
    //    if(BitConverter.IsLittleEndian == true)
    //    {
    //        var bytes = new byte[2] { data[offset + 1], data[offset] };            
    //        return BitConverter.ToUInt16(bytes, 0);
    //    }
    //    else
    //    {
    //         return BitConverter.ToUInt16(data, offset);
    //    }
    //}
    
    public static byte GetCrc8(this byte[] data, int offset, int length)
    {
        byte fcs = 0xFF;
        for (int i = offset; i < length + offset; i++)
        {
            fcs = (byte)(fcs ^ Crc8ItuTable[fcs ^ data[i]]);
        }
    
        return fcs;
    }
    
    public static bool IsCrcITUGood(this byte[] data, int offset, int length)
    {
        ushort fcs = 0xFFFF;
        for (int i = offset; i < length + offset; i++)
        {
            fcs = (ushort)((ushort)(fcs >> 8) ^ Crc8ItuTable[(fcs ^ data[i]) & 0xFF]);
        }
    
        return (fcs == 0xF0B8); //magic value
    }
        
       
        
        
    }
}
